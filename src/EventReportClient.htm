<HTML>
<HEAD>
<meta charset="utf-8"/>
<TITLE>Event Report Client</TITLE>
</HEAD>
<BODY onload="init();">

    <hr />
    <input id="status" width="400" value="未登陆" disabled="disabled" />
    <hr />

    <font>服务器地址</font><input type="text" id="wsUri" value="ws://192.168.2.232:9986" /><p/>
	<font>用户ID</font><input type="text" id="UserId" value="6001" />
	<font>密码</font><input type="password" id="password" value="1234" /><p/>
    <font>版本</font><input type="text" id="version" value="1.0.0.0" />
    <input type="button" value="连接" onclick="StartConnect();" />
	<input type="button" value="断开" onclick="DisConnect();" /><p/>
	<input type="button" value="外呼" onclick="MakeCall();" /><font>主叫</font><input type="text" id="calling" value="1000" /><font>被叫</font><input type="text" id="called" value="5000" /><p/>
	<input type="button" value="呼单路" onclick="MakeConnection();" /><font>被叫</font><input type="text" id="called2" value="5000" /><p/>
	<input type="button" value="放音" onclick="PlayFile();" /><font>语音文件</font><input type="text" id="filename" value="cmwwpstn.wav" /><p/>
	<input type="button" value="挂机" onclick="ClearCall();" /><p/>
    <input type="button" value="放音并收键" onclick="PlayFileAndCollects();" /><font>语音文件</font><input type="text" id="filename2" value="cmwwpstn.wav" /><font>最短收键数</font><input type="text" id="min" value="1" /><font>最长收键数</font><input type="text" id="max" value="1" /><font>播放次数</font><input type="text" id="tries" value="3" /><font>等待按键超时</font><input type="text" id="timeout" value="10000" /><font>结束按键</font><input type="text" id="terminators" value="*#" /><p />
	<input type="button" value="开始录音" onclick="StartRecord();" /><font>语音文件</font><input type="text" id="recordfilename" value="/record/99754f55-239b-4bd1-980e-3b4b7f389253.wav" /><input type="button" value="停止录音" onclick="StopRecord();" /><p/>
    <input type="button" value="开始DTMF接收" onclick="StartDTMFCollection();" /><input type="button" value="停止DTMF接收" onclick="StopDTMFCollection();" /><p/>
	<script type="text/javascript">

		var websocket;
		var invokeid = 0;
		var session;
		
		function init(){
		}
		
		function StartConnect() {
		    if(websocket != undefined){
                delete websocket;
		    }
			websocket = new WebSocket(document.getElementById("wsUri").value);
            websocket.onopen = function(evt) { onOpen(evt) };
            websocket.onclose = function(evt) { onClose(evt) };
            websocket.onmessage = function(evt) { onMessage(evt) };
            websocket.onerror = function(evt) { onError(evt) };
        }

		function DisConnect()
		{		
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "DisConnect";
			doSend(JSON.stringify(request));
			websocket.close();
		}
		
		function MakeCall()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "MakeCall";
			request.param = new Object();
			request.param.callingDevice = document.getElementById("calling").value;
			request.param.calledDirectoryNumber = document.getElementById("called").value;
			doSend(JSON.stringify(request));
		}
		
		function MakeConnection()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "MakeConnection";
			request.param = new Object();
			request.param.initiatingDevice = document.getElementById("called2").value;
			request.param.caller = "10086";
			request.param.userdata="qiwei";
			doSend(JSON.stringify(request));
		}
		
		function PlayFile()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "PlayFile";
			request.param = new Object();
			request.param.connection = session;
			request.param.filename = document.getElementById("filename").value;
			doSend(JSON.stringify(request));
		}
		
		function PlayFileAndCollects() {
		    var request = new Object();
		    request.invokeID = invokeid++;
		    request.type = "request";
		    request.request = "PlayFileAndCollects";
		    request.param = new Object();
		    request.param.connection = session;
		    request.param.filename = document.getElementById("filename2").value;
		    request.param.min = parseInt(document.getElementById("min").value);
		    request.param.max = parseInt(document.getElementById("max").value);
		    request.param.tries = parseInt(document.getElementById("tries").value);
		    request.param.timeout = parseInt(document.getElementById("timeout").value);
		    request.param.terminators = document.getElementById("terminators").value;
		    //request.param.digit_timeout = parseInt(document.getElementById("digit_timeout").value);
		    doSend(JSON.stringify(request));
		}
		
		function StartRecord()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "StartRecord";
			request.param = new Object();
			request.param.connection = session;
			request.param.filename = document.getElementById("recordfilename").value;
			doSend(JSON.stringify(request));
		}

		function StopRecord()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "StopRecord";
			request.param = new Object();
			request.param.connection = session;
			request.param.filename = document.getElementById("recordfilename").value;
			doSend(JSON.stringify(request));
		}
		
		function StartDTMFCollection()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "StartDTMFCollection";
			request.param = new Object();
			request.param.connection = session;
			doSend(JSON.stringify(request));
		}
		
		function StopDTMFCollection()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "StopDTMFCollection";
			request.param = new Object();
			request.param.connection = session;
			doSend(JSON.stringify(request));
		}
		
		function ClearConnection()
		{
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "ClearConnection";
			request.param = new Object();
			request.param.connectionToBeCleared = session;
			doSend(JSON.stringify(request));
		}
		
		function AlternateCall(active, other)
		{
		    var alternateCall = new Object();
		    alternateCall.active = active;
		    alternateCall.other = other;
		    alternateCall.cmd = "AlternateCall";
		    alternateCall.event = "cmd";
		    doSend(JSON.stringify(login));
		}

		function AnswerCall(alertingCall)
		{
		    var answerCall = new Object();
		    answerCall.alertingCall = alertingCall;
		    answerCall.cmd = "AnswerCall";
		    answerCall.event = "cmd";
		    doSend(JSON.stringify(login));
		}

		function CallCompletion(feature,connection) {
		    var callCompletion = new Object();
		    callCompletion.feature = feature;
		    callCompletion.connection = connection;
		    callCompletion.cmd = "CallCompletion";
		    callCompletion.event = "cmd";
		    doSend(JSON.stringify(login));
		}
        
		function ClearCall()
		{
		    var request = new Object();
		    request.invokeID = invokeid++;
		    request.type = "request";
		    request.request = "ClearCall";
		    request.param = new Object();
		    request.param.callToBeCleared = session;
		    doSend(JSON.stringify(request));
		}

        function onOpen(evt)
        {
            document.getElementById("status").value = "已连接";
			var request = new Object();
			request.invokeID = invokeid++;
			request.type = "request";
			request.request = "Connect";
			request.param = new Object();
			request.param.LoginID= document.getElementById("UserId").value;
			request.param.passWord = document.getElementById("password").value;
			request.param.version = document.getElementById("version").value;
			doSend(JSON.stringify(request));
        }

		function onClose(evt)
		{
			document.getElementById("status").value = "已断开连接";
		}

		function onMessage(evt)
		{
			writeToScreen('<span style="font-size:80%;color: blue;">Receive: ' + evt.data+'</span>');
			var event = JSON.parse(evt.data);
			if(event.event === "ServiceInitiated")
				session = event.param.initiatedConnection;
			
			else if(event.event === "Delivered")
				session = event.param.connection;
				
		}

		function onError(evt)
		{
			writeToScreen('<span style="font-size:80%;color: red;">ERROR:</span> ' + evt.data);
			document.getElementById("status").value = "已断开连接";
		}

		function doSend(message)
		{
			if(websocket.readyState == 1){
				writeToScreen("SENT: " + message);
				websocket.send(message);
			}
			else{
				document.getElementById("status").value = "未连接";
			}
		}
		
		function writeToScreen(message)
		{
			var pre = document.createElement("p");
			pre.style.wordWrap = "break-word";
			pre.innerHTML = message;
			output.insertBefore(pre,output.firstChild);
		}
		
    </script>
	<script type="text/javascript">
		
	</script>
	<div id="output"></div>
</BODY>
</HTML>
