<?xml version="1.0" ?>
<fsm name="avayaAgent" initial="init">
<datamodel>
	<data id="connection"/>
	<data id="consultationNewCall"/>
</datamodel>
<scriptmodel>
	<script src="./cmpObject.js" />
</scriptmodel>
	<state id="init">
		<onentry>
			<send target="this" type="notify" dest="extension" event="AgentLogout">
				<event>AgentLogout</event>
				<AgentLogout type="script">var agentId={};agentId.agentId = _agent.AgentId; agentId = agentId;</AgentLogout>
				<extension type="script">_agent.Extension</extension>
			</send>
		</onentry>
		<event event="cmd" cond="_event.cmd=='logon' &amp;&amp; _event.password == _agent.Password">
			<transition  target="logining"/>
		</event>
		<event event="cmd" cond="_event.cmd=='logon'">
			<send target="this" type="response" dest="client" event="logon">
				<status>1</status>
				<type>logon</type>
			</send>
		</event>
		<event event="AgentLogout">
			<transition  target="init"/>
		</event>
		<event event="ACS_OPEN_STREAM_CONF" cond="_event.OpenStream.status==0">
		</event>
		<event event=".*">
			<send target="this" type="response" dest="client" eventexpr="_event._name">
				<status>1</status>
				<type type="script">_event.cmd;</type>
				<mem>未登录</mem>
			</send>
		</event>
		<state id="logining">
			<onentry>
				<send target="this" type="cmd" dest="this" event="AgentLogin">
					<deviceId type="script">_avaya.Extension</deviceId>
					<password type="script">_avaya.Password</password>
					<agentId type="script">_avaya.AgentId</agentId>
					<group type="script">_event.logingroups</group>
				</send>
				<send target="this" type="notify" dest="extension" event="AgentLogin">
					<event>AgentLogin</event>
					<AgentLogin type="script">var AgentLogin ={};AgentLogin.agentId = _agent.AgentId; AgentLogin;</AgentLogin>
					<extension type="script">_agent.Extension</extension>
				</send>
			</onentry>
			<event event="AgentLogin" cond="_event.AgentLogin.status==0">
				<transition  target="logined"/>
			</event>
			<event event="AgentLogin">
				<send target="this" type="response" dest="client" event="logon">
					<status type="script">_event.AgentLogin.status</status>
					<type>logon</type>
				</send>
				<transition  target="init"/>
			</event>
			<event event="ConnectError">
				<send target="this" type="cmd" dest="this" event="AgentLogout">
					<deviceId type="script">_avaya.Extension</deviceId>
					<password type="script">_avaya.Password</password>
					<agentId type="script">_avaya.AgentId</agentId>
				</send>
				<transition  target="init"/>
			</event>
			<event event="ConnectClose">
				<send target="this" type="cmd" dest="this" event="AgentLogout">
					<deviceId type="script">_avaya.Extension</deviceId>
					<password type="script">_avaya.Password</password>
					<agentId type="script">_avaya.AgentId</agentId>
				</send>
				<transition  target="init"/>
			</event>
			<event event="cmd" cond="_event.cmd=='logout'">
				<send target="this" type="cmd" dest="this" event="AgentLogout">
					<deviceId type="script">_avaya.Extension</deviceId>
					<password type="script">_avaya.Password</password>
					<agentId type="script">_avaya.AgentId</agentId>
					<group type="script">_event.logingroups</group>
				</send>
				<transition  target="init"/>
			</event>
			<event event="cmd" cond="_event.cmd=='ping'">
				<log level="debug"> ping message</log>
			</event>
			<event event=".*">
				<log level="warn" type="script">_state._id + " not process event "+_event._name;</log>
			</event>
			<state id="logined">
				<onentry>
					<send target="this" type="response" dest="client" event="logon">
						<status type="script">0</status>
						<type>logon</type>
					</send>
					<send target="this" type="cmd" dest="this" event="AgentGetState">
						<deviceId type="script">_avaya.Extension</deviceId>
					</send>
				</onentry>
				<event event="AgentGetState" cond="_event.AgentGetState.agentState=='NotReady'">
					<send target="this" type="notify" dest="client" event="agentbusy">
						<status type="script">0;</status>
						<type>agentbusy</type>
					</send>
					<transition  target="NotReady"/>
				</event>
				<event event="AgentGetState" cond="_event.AgentGetState.agentState=='Ready'">
					<send target="this" type="notify" dest="client" event="agentidle">
						<status type="script">0;</status>
						<type>agentidle</type>
					</send>
					<transition  target="Ready"/>
				</event>
				<event event="AgentGetState" cond="_event.AgentGetState.agentState=='Null'">
					<transition  target="Null"/>
				</event>
				<event event="AgentGetState" cond="_event.AgentGetState.agentState=='WorkNotReady'">
					<send target="this" type="notify" dest="client" event="agentbusy">
						<status type="script">0;</status>
						<type>agentbusy</type>
					</send>
					<transition  target="WorkNotReady"/>
				</event>
				<event event="AgentGetState" cond="_event.AgentGetState.agentState=='WorkReady'">
					<send target="this" type="notify" dest="client" event="agentbusy">
						<status type="script">0;</status>
						<type>agentbusy</type>
					</send>
					<transition  target="WorkReady"/>
				</event>
				<event event="cmd" cond="_event.cmd=='logon' &amp;&amp; _event.password == _agent.Password">
					<send target="this" type="notify" dest="client" event="logon">
						<status>1</status>
						<type>logon</type>
					</send>
					<transition  target="logining"/>
				</event>
				<event event="cmd" cond="_event.cmd=='logon'">
					<send target="this" type="response" dest="client" event="logon">
						<status>1</status>
						<type>logon</type>
					</send>
				</event>
				<event event="cmd" cond="_event.cmd=='agentidle'">
					<send target="this" type="cmd" dest="this" event="AgentSetFree">
						<deviceId type="script">_avaya.Extension</deviceId>
						<agentId type="script">_avaya.AgentId</agentId>
					</send>
				</event>
				<event event="AgentSetFree">
					<send target="this" type="notify" dest="client" event="agentidle">
						<status type="script"> _event.AgentSetFree.status</status>
						<type>agentidle</type>
					</send>
					<transition cond="_event.AgentSetFree.status==0" target="Ready"/>
				</event>
				<event event="DELIVERED">
					<send target="this" type="notify" dest="client" event="inringing">
						<type>inringing</type>
						<callid type="script">_event.delivered.connection.callID;</callid>
						<timestamp type="script">Date.parse(new Date()); </timestamp>
						<caller type="script">_event.delivered.calling; </caller>
						<called type="script">_event.delivered.called;</called>
						<nowgroupid type="script"> -1;</nowgroupid>
					</send>
					<transition  target="Alerting"/>
				</event>
				<event event="cmd" cond="_event.cmd=='makecall'">
					<send target="this" type="cmd" dest="this" event="MakeCall">
						<calling type="script">_agent.Extension;</calling>
						<called type="script">_event.called;</called>
					</send>
				</event>
				<event event="MakeCall">
					<send target="this" type="notify" dest="client" event="makecall">
						<status type="script">_event.MakeCall.status;</status>
						<type>makecall</type>
						<reason type="script">_event.MakeCall.reason;</reason>
					</send>
					<transition cond="_event.MakeCall.status==0" target="originated"/>
					<transition target="ACW"/>
				</event>
				<state id="NotReady">
				</state>
				<state id="Ready">
					<event event="cmd" cond="_event.cmd=='agentbusy'">
						<send target="this" type="cmd" dest="this" event="AgentSetBusy">
							<deviceId type="script">_avaya.Extension</deviceId>
							<agentId type="script">_avaya.AgentId</agentId>
						</send>
					</event>
					<event event="AgentSetBusy">
						<send target="this" type="notify" dest="client" event="agentbusy">
							<status type="script">_event.AgentSetBusy.status</status>
							<type>agentbusy</type>
						</send>
						<transition  cond="_event.status==0" target="NotReady"/>
					</event>
				</state>
				<state id="Null">
				</state>
				<state id="WorkNotReady">
				</state>
				<state id="WorkReady">
				</state>
				<state id="originated">
					<onentry>
						<script>connection = _event.MakeCall.newCall;</script>
					</onentry>
					<event event="ORIGINATED">
					</event>
					<event event="DELIVERED">
						<send target="this" type="notify" dest="client" event="calledringing">
							<type>calledringing</type>
							<callid type="script">_event.delivered.connection.callID;</callid>
							<timestamp type="script">Date.parse(new Date()); </timestamp>
							<caller type="script">_event.delivered.calling; </caller>
							<called type="script">_event.delivered.called;</called>
							<nowgroupid type="script"> -1;</nowgroupid>
						</send>
						<transition  cond="_event.delivered.connection.callID == connection.callID" target="delivered"/>
					</event>
					<event event="CONNECTION_CLEARED">
						<transition cond="cmp(_event.connectionCleared.connection,connection)" target="ACW"/>
					</event>
					<event event="cmd" cond="_event.cmd=='cancelmakecall'">
						<send target="this" type="cmd" dest="this" event="ClearCall">
							<connection type="script">connection;</connection>
						</send>
					</event>
					<state id ="delivered">
						<event event="ESTABLISHED">
							<send target="this" type="notify" dest="client" event="answer">
								<type>answer</type>
								<callid type="script">_event.established.connection.callID;</callid>
								<called type="script">_event.established.called;</called>
							</send>
							<transition target="established"/>
						</event>
						<event event="cmd" cond="_event.cmd=='cancelmakecall'">
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">connection;</connection>
							</send>
						</event>
					</state>
				</state>
				<state id="Alerting">
					<onentry>
						<script>connection = _event.delivered.connection;</script>
					</onentry>
					<event event="ESTABLISHED">
						<send target="this" type="notify" dest="client" event="incall">
							<type>incall</type>
							<callid type="script">_event.established.connection.callID;</callid>
							<called type="script">_event.established.called;</called>
						</send>
						<transition cond="cmp(_event.established.connection,connection)" target="established"/>
					</event>
					<event event="CONNECTION_CLEARED">
						<transition cond="cmp(_event.connectionCleared.connection,connection)" target="ACW"/>
					</event>
					<event event="cmd" cond="_event.cmd=='cancelmakecall'">
						<send target="this" type="cmd" dest="this" event="ClearCall">
							<connection type="script">connection;</connection>
						</send>
					</event>
					<event event="cmd" cond="_event.cmd=='answercall'">
						<send target="this" type="cmd" dest="this" event="AnswerCall">
							<connection type="script">connection;</connection>
						</send>
					</event>
				</state>
				<state id="ACW">
					<onentry>
						<send target="this" type="notify" dest="client" event="after">
							<type>after</type>
							<callid type="script">_event.connectionCleared.connection.callID;</callid>
							<called type="script">_agent.Extension;</called>
						</send>
					</onentry>
				</state>
				<state id="established">
					<event event="cmd" cond="_event.cmd=='makecall'">
					</event>
					<event event="CONNECTION_CLEARED">
						<transition cond="cmp(_event.connectionCleared.connection,connection)" target="ACW"/>
					</event>
					<event event="cmd" cond="_event.cmd=='cancelmakecall'">
						<send target="this" type="cmd" dest="this" event="ClearCall">
							<connection type="script">connection;</connection>
						</send>
					</event>
					<event event="cmd" cond="_event.cmd=='mute'">
						<send target="this" type="cmd" dest="this" event="HoldCall">
							<connection type="script">connection;</connection>
						</send>
					</event>
					<event event="HoldCall" >
						<send target="this" type="notify" dest="client" event="mute">
							<type>mute</type>
							<status type="script">_event.HoldCall.status;</status>
							<reason type="script">_event.HoldCall.reason; </reason>
						</send>
						<transition  cond = "_event.HoldCall.status == 0" target="held"/>
					</event>
					<event event="RETRIEVED" cond="cmp(_event.retrieved.connection,connection)">
					</event>
					<event event="cmd" cond="_event.cmd=='agentconsult'">
						<send target="this" type="cmd" dest="this" event="ConsultationCall">
							<connection type="script">connection;</connection>
							<called type="script">_event.num;</called>
						</send>
						<transition target="consultationing"/>
					</event>
					<event event="cmd" cond="_event.cmd=='transfercall'">
						<send target="this" type="cmd" dest="this" event="ConsultationCall">
							<connection type="script">connection;</connection>
							<called type="script">_event.num;</called>
						</send>
						<transition target="transfering"/>
					</event>
					<state id="transfering">
						<event event="ConsultationCall" >
							<send target="this" type="notify" dest="client" event="transfercall">
								<type>transfercall</type>
								<status type="script">_event.ConsultationCall.status;</status>
								<reason type="script">_event.ConsultationCall.reason; </reason>
							</send>
							<script>consultationNewCall = _event.ConsultationCall.newCall;</script>

							<send target="this" type="cmd" dest="client" event="TransferCall">
								<activeCall type="script">consultationNewCall;</activeCall>
								<heldCall type="script">connection;</heldCall>
							</send>
							
							<transition cond = "_event.ConsultationCall.status != 0" target="established"/>
							
						</event>
						<event event="HELD">
						</event>
						<event event="DELIVERED">
						</event>
						<event event="FAILED">
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">_event.failed.connection;</connection>
							</send>
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">connection;</connection>
							</send>
						</event>
						<event event="ORIGINATED" cond="cmp(_event.originated.connection,consultationNewCall)">
						</event>
						
						<event event="TransferCall" cond="_event.TransferCall.status==0">
						</event>
						
						<event event="TransferCall">
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">connection;</connection>
							</send>
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">consultationNewCall;</connection>
							</send>
						</event>
						<event event ="TRANSFERRED">
							<script>_event.connectionCleared = {}; _event.connectionCleared.connection = connection;</script>
							<transition target="ACW"/>
						</event>
						<event event="CONNECTION_CLEARED" cond="cmp(_event.connectionCleared.connection,consultationNewCall)">
						</event>
						<event event="RETRIEVED" >
							<transition cond="cmp(_event.retrieved.connection, connection)" target="established"/>
						</event>
					</state>
					<state id="consultationing">
					
						<event event="HELD">
						</event>
						<event event="FAILED">
						</event>
						<event event="ORIGINATED" cond="cmp(_event.originated.connection,consultationNewCall)">
						</event>
						<event event="DELIVERED" cond="cmp(_event.originated.connection,consultationNewCall)">
							<transition target="consultationDelivered"/>
						</event>
						<event event="ConsultationCall" >
							<send target="this" type="notify" dest="client" event="agentconsult">
								<type>agentconsult</type>
								<status type="script">_event.ConsultationCall.status;</status>
								<reason type="script">_event.ConsultationCall.reason; </reason>
							</send>
							<script>consultationNewCall = _event.ConsultationCall.newCall;</script>
							<transition  cond = "_event.ConsultationCall.status != 0" target="established"/>
						</event>
						<event event="cmd" cond="_event.cmd=='agentconsultback'">
							<send target="this" type="cmd" dest="this" event="ReconnectCall">
								<activeCall type="script">consultationNewCall;</activeCall>
								<heldCall type="script">connection;</heldCall>
							</send>
							<transition target="consultationReconnecting"/>
						</event>
						<event event="CONNECTION_CLEARED" cond="cmp(_event.connectionCleared.connection,consultationNewCall)">
						</event>
						<event event="cmd" cond="_event.cmd=='cancelmakecall'">
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">connection;</connection>
							</send>
							<send target="this" type="cmd" dest="this" event="ClearCall">
								<connection type="script">consultationNewCall;</connection>
							</send>
						</event>

						<event event="RETRIEVED" >
							<transition cond="cmp(_event.retrieved.connection, connection)" target="established"/>
						</event>
						<state id="consultationDelivered">
							<event event="ESTABLISHED" cond="_event.established.connection.callID == consultationNewCall.callID">
								<send target="this" type="notify" dest="client" event="consultationcalls">
									<type>consultationcalls</type>
									<status type="script">_event.established.status;</status>
									<reason type="script">_event.established.reason; </reason>
								</send>
								<transition target="consultationed"/>
							</event>
							<state id="consultationed">
							</state>
						</state>
						<state id="consultationReconnecting">
							<event event="ReconnectCall">
								<send target="this" type="notify" dest="client" event="agentconsultback">
									<type>agentconsultback</type>
									<status type="script">_event.ReconnectCall.status;</status>
									<reason type="script">_event.ReconnectCall.reason; </reason>
								</send>
							</event>
							<event event="CONNECTION_CLEARED" cond="cmp(_event.connectionCleared.connection,consultationNewCall)">
							</event>
						</state>
					</state>
					<state  id="held">
						<event event="cmd" cond="_event.cmd=='mute'">
						</event>
						<event event="HELD" cond="cmp(_event.held.connection,connection)">
						</event>
						<event event="cmd" cond="_event.cmd=='unmute'">
							<send target="this" type="cmd" dest="this" event="RetrieveCall">
								<connection type="script">connection;</connection>
							</send>
						</event>
						<event event="RetrieveCall" >
							<send target="this" type="notify" dest="client" event="unmute">
								<type>unmute</type>
								<status type="script">_event.RetrieveCall.status;</status>
								<reason type="script">_event.RetrieveCall.reason; </reason>
							</send>
							<transition  cond = "_event.RetrieveCall.status == 0" target="established"/>
						</event>
					</state>
				</state>
			</state>
		</state>

		
    </state>

</fsm>

